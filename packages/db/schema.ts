import { sqliteTable, text, integer, real, primaryKey } from 'drizzle-orm/sqlite-core'; import { sql } from 'drizzle-orm';
export const networks = sqliteTable('networks', { id: integer('id').primaryKey(), slug: text('slug').notNull(), name: text('name').notNull(), coingecko_platform: text('coingecko_platform').notNull() });
export const addresses = sqliteTable('addresses', { id: text('id').primaryKey(), label: text('label') });
export const tokens = sqliteTable('tokens', { contract: text('contract').notNull(), networkId: integer('network_id').notNull(), symbol: text('symbol').notNull(), name: text('name').notNull(), decimals: integer('decimals').notNull(), logo: text('logo'), coingecko_id: text('coingecko_id') }, (t) => ({ pk: primaryKey({ columns: [t.contract, t.networkId] }) }));
export const balances = sqliteTable('balances', { addressId: text('address_id').notNull(), contract: text('contract').notNull(), networkId: integer('network_id').notNull(), rawBalance: text('raw_balance').notNull(), updatedAt: integer('updated_at', { mode: 'timestamp' }).default(sql`(unixepoch())`) }, (t) => ({ pk: primaryKey({ columns: [t.addressId, t.contract, t.networkId] }) }));
export const prices = sqliteTable('prices', { coingecko_id: text('coingecko_id').notNull(), currency: text('currency').notNull(), value: real('value').notNull(), updatedAt: integer('updated_at', { mode: 'timestamp' }).default(sql`(unixepoch())`) }, (t) => ({ pk: primaryKey({ columns: [t.coingecko_id, t.currency] }) }));
